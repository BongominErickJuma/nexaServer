const courseAssignmentAnswers = [
  {
    courseTitle: "Digital Logic Design",
    unitCode: "CENG101",
    answers: [
      {
        id: 1,
        question:
          "Design a 4-bit binary adder using basic logic gates (AND, OR, NOT). Provide a detailed explanation of your design process.",
        answers: [
          {
            id: 1,
            answer:
              "A 4-bit binary adder can be designed using full adders. Each full adder takes two input bits and a carry-in bit, producing a sum and a carry-out. The carry-out from one full adder is passed as the carry-in to the next. Basic logic gates are used to create the XOR (sum) and AND-OR (carry) logic for each bit. A full adder circuit combines these gates to perform the binary addition.",
          },
          {
            id: 2,
            answer:
              "The design process involves dividing the binary adder into smaller blocks. The carry-out from each stage becomes the carry-in for the next, thus cascading the addition process for larger bit-widths.",
          },
        ],
      },
      {
        id: 2,
        question:
          "Convert the decimal number 29 to binary, hexadecimal, and octal.",
        answers: [
          { id: 1, answer: "Binary: 11101, Hexadecimal: 1D, Octal: 35." },
          { id: 2, answer: "Binary: 11101, Hex: 1D, Octal: 035." },
        ],
      },
    ],
  },
  {
    courseTitle: "Microprocessor Systems",
    unitCode: "CENG202",
    answers: [
      {
        id: 1,
        question:
          "Write an assembly language program for the 8086 microprocessor that adds two numbers stored in memory and displays the result.",
        answers: [
          {
            id: 1,
            answer: `MOV AX, [5000H] ; Load first number from memory\nMOV BX, [5002H] ; Load second number from memory\nADD AX, BX ; Add both numbers\nMOV [5004H], AX ; Store the result in memory at address 5004H`,
          },
          {
            id: 2,
            answer: `Another approach would be to load the values into different registers and then use the ADD instruction:\nMOV CX, [5000H] ; Load first number\nMOV DX, [5002H] ; Load second number\nADD CX, DX ; Add them together\nMOV [5004H], CX ; Save result`,
          },
        ],
      },
      {
        id: 2,
        question:
          "Explain how the stack and the stack pointer work in microprocessors.",
        answers: [
          {
            id: 1,
            answer:
              "The stack is a special region in memory used for storing temporary data like function parameters, return addresses, and local variables. The stack pointer (SP) is a register that keeps track of the top of the stack. When data is pushed onto the stack, the SP is decremented, and when data is popped off the stack, the SP is incremented.",
          },
          {
            id: 2,
            answer:
              "The stack pointer initially points to the top of the stack. Each push operation decreases the stack pointer, and each pop operation increases the stack pointer. This structure allows for efficient last-in, first-out (LIFO) access to the data.",
          },
        ],
      },
    ],
  },
  {
    courseTitle: "Signals and Systems",
    unitCode: "CENG203",
    answers: [
      {
        id: 1,
        question:
          "Find the Fourier transform of the following signal: x(t) = e^(-at)u(t), where u(t) is the unit step function.",
        answers: [
          {
            id: 1,
            answer:
              "The Fourier transform of the signal x(t) = e^(-at)u(t) is 1/(a + jω), where 'a' is a constant and ω is the angular frequency.",
          },
          {
            id: 2,
            answer:
              "Using the definition of the Fourier transform, we solve the integral of e^(-at)u(t) from 0 to infinity, which results in 1/(a + jω).",
          },
        ],
      },
      {
        id: 2,
        question:
          "Explain the difference between continuous-time and discrete-time signals with examples.",
        answers: [
          {
            id: 1,
            answer:
              "Continuous-time signals are defined for every value of time (e.g., sin(t)), whereas discrete-time signals are defined only at discrete times (e.g., sequences like x[n] = sin(nT)).",
          },
          {
            id: 2,
            answer:
              "A continuous-time signal is represented as a function of a continuous variable, like voltage over time. A discrete-time signal is defined only at specific intervals, often generated by sampling a continuous signal.",
          },
        ],
      },
    ],
  },
  {
    courseTitle: "Computer Networks",
    unitCode: "CENG304",
    answers: [
      {
        id: 1,
        question: "Describe the OSI model and the functionality of each layer.",
        answers: [
          {
            id: 1,
            answer:
              "The OSI model has seven layers: 1) Physical layer handles transmission of raw data; 2) Data Link layer manages node-to-node communication and error detection; 3) Network layer handles routing and addressing (e.g., IP); 4) Transport layer ensures reliable data transmission (e.g., TCP); 5) Session layer manages sessions between applications; 6) Presentation layer deals with data encoding/decoding; 7) Application layer provides network services to end-user applications.",
          },
          {
            id: 2,
            answer:
              "Each layer of the OSI model interacts with its immediate neighboring layers. The model helps standardize networking protocols and simplify troubleshooting by breaking down the communication process.",
          },
        ],
      },
      {
        id: 2,
        question:
          "Explain the process of TCP three-way handshake in establishing a connection.",
        answers: [
          {
            id: 1,
            answer:
              "The TCP three-way handshake involves: 1) Client sends SYN packet to server to initiate connection. 2) Server responds with SYN-ACK to acknowledge. 3) Client sends ACK to confirm, establishing the connection.",
          },
          {
            id: 2,
            answer:
              "The three-way handshake ensures that both the client and server are ready to communicate and can establish a reliable connection before data transmission begins.",
          },
        ],
      },
    ],
  },
  {
    courseTitle: "Embedded Systems",
    unitCode: "CENG305",
    answers: [
      {
        id: 1,
        question:
          "Design an embedded system that controls the speed of a DC motor using a microcontroller.",
        answers: [
          {
            id: 1,
            answer:
              "An embedded system to control a DC motor's speed can use Pulse Width Modulation (PWM) generated by a microcontroller (e.g., Arduino). The duty cycle of the PWM signal controls the motor speed, and the microcontroller adjusts this signal based on inputs like a potentiometer or feedback from a sensor.",
          },
          {
            id: 2,
            answer:
              "Using a microcontroller like the PIC18F, you can vary the speed of a DC motor by adjusting the duty cycle of the PWM signal. A higher duty cycle corresponds to faster motor speed, while a lower duty cycle slows it down.",
          },
        ],
      },
      {
        id: 2,
        question:
          "Explain the difference between hard real-time and soft real-time systems.",
        answers: [
          {
            id: 1,
            answer:
              "Hard real-time systems have strict deadlines, and missing a deadline could lead to catastrophic failure (e.g., pacemakers). Soft real-time systems, on the other hand, have deadlines that can occasionally be missed with acceptable consequences (e.g., video streaming).",
          },
          {
            id: 2,
            answer:
              "In hard real-time systems, failure to meet deadlines results in system failure. In soft real-time systems, occasional deadline misses are tolerable but may degrade the quality of service.",
          },
        ],
      },
    ],
  },
  {
    courseTitle: "Software Engineering",
    unitCode: "CENG401",
    answers: [
      {
        id: 1,
        question:
          "Describe the waterfall model in software development. Highlight its advantages and disadvantages.",
        answers: [
          {
            id: 1,
            answer:
              "The waterfall model is a linear approach where each phase (e.g., Requirements, Design, Implementation, Testing, Maintenance) follows the other sequentially. Advantages: Simple to manage, good for small projects. Disadvantages: Inflexible, hard to incorporate changes once a phase is complete.",
          },
          {
            id: 2,
            answer:
              "The waterfall model is best suited for projects with clearly defined requirements that are unlikely to change. However, it's less adaptable when changes are needed in later stages, making it unsuitable for projects where requirements evolve.",
          },
        ],
      },
      {
        id: 2,
        question:
          "Explain the purpose of unit testing in software development.",
        answers: [
          {
            id: 1,
            answer:
              "Unit testing verifies individual components (units) of the software for correctness. It helps identify bugs early in the development process and ensures that each part of the application works as expected in isolation.",
          },
          {
            id: 2,
            answer:
              "Unit testing allows developers to focus on testing small, isolated pieces of code to ensure they behave correctly. It is often automated, allowing for frequent testing during the development cycle.",
          },
        ],
      },
    ],
  },
];

export default courseAssignmentAnswers;
